`Sure, here are the steps to make Carbonara Pasta:

Ingredients:

1) Pasta (preferably Spaghetti) - 400g
2) Pancetta - 200g
3) Egg yolk - 4
4) Parmesan cheese - 150g
5) Heavy cream - 200ml
6) Black pepper - 1 tsp
7) Salt - to taste

Steps:

1) Boil water in a large pot and add a generous amount of salt to it. Once the water is boiling, add the pasta and cook until it is al dente (cooked but still firm).

2) Meanwhile, cut the pancetta into small cubes and add it to a heated non-stick pan. Cook on medium heat until it is crispy and golden brown.

3) In a bowl, whisk together the egg yolks, grated Parmesan cheese, and heavy cream until it becomes a smooth mixture.

4) Once the pasta is cooked, reserve a cup of pasta water and drain the rest of the water.

5) Add the cooked pancetta to the same pot as the pasta and mix well.

6) Pour the egg and Parmesan cheese mixture over the pasta and pancetta, while mixing continuously. Ensure the heat is on low while adding.

7) Add Â½ cup of reserved pasta water slowly to get the desired consistency.

8) Season the dish with black pepper and salt, as per taste.

9) Serve hot, garnished with some more grated Parmesan cheese and fresh parsley, if desired.

Your delicious Carbonara pasta is now ready to enjoy!`


when querying your API, this is how I receive the responses. everything happens through a readableStream

How can I make it so that the reply is displayed correctly on the front-end rather than a block of text with no newlines, lists etc? 

the way I insert the message in my frontend is using this api route: `import { Configuration, OpenAIApi } from 'openai-edge'
import { OpenAIStream, StreamingTextResponse } from 'ai'
import { OPENAI_API_KEY } from '$env/static/private'


//import { env } from '$env/dynamic/private'
// You may want to replace the above with a static private env variable
// for dead-code elimination and build-time type-checking:
// import { OPENAI_API_KEY } from '$env/static/private'

//import type { RequestHandler } from './$types'

// Create an OpenAI API client
const config = new Configuration({
  apiKey: OPENAI_API_KEY
});

const openai = new OpenAIApi(config)

export async function POST({ request }) {
     const { messages } = await request.json()

  // Ask OpenAI for a streaming chat completion given the prompt
  const response = await openai.createChatCompletion({
    model: 'gpt-3.5-turbo',
    stream: true,
    messages: messages.map((message) => ({
      content: message.content,
      role: message.role
    }))
  })

  // Convert the response into a friendly text-stream
  const stream = OpenAIStream(response);
  // Respond with the stream
  return new StreamingTextResponse(stream);
}` in my sveltekit app, then `<li class="flex flex-shrink-0 gap-2 bg-[#444654]">
				<div class="">{message.content}</div>
			</li>` inside my html

however ordered lists, bold fonts, tables etc are not displayed correctly. Why? 





















This is because the response from your API is just a plain text and does not contain any HTML tags or formatting information that can be interpreted by the browser to display special elements like ordered lists, bold fonts, tables, etc. 

To display the message correctly on the front-end with proper formatting, you need to first parse the plain text response and convert it into HTML format by adding appropriate HTML tags like `ol` for ordered lists, `strong` for bold fonts, and `table` for tables. 

You can do this either on the server-side or on the client-side by using a library like DOMPurify or Sanitize HTML. Once the message is properly formatted in HTML, you can display it on the front-end using an HTML element like `div` or `span`.
